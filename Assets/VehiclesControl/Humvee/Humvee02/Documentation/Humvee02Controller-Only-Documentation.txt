"Humvee02DevScene" Scene Setup Steps
-----------------------------------------------------------------------------------
Description:

Create a basic Vehicle Controller for your Unity projects using vehicle models
from Synty Polygon Battle Royale Asset.

Vehicle Controls: 
-----------------

Vehicle Forward:  W
Vehicle Reverse:  S
Turn Left:        A
Turn Right:       D
Apply Brake:      Space

Manual Setup Instruction:
-------------------------

* Simply follow the instruction for manual setup found below.


-----------------------------------------------------------------------------------

Prep Step: Create New Scene Called: "Humvee02DevScene"

Note: if you already have some sort of a test terrain in place, well then, you
can simple skip the steps: #1, 2 & 3 and go directly to #4.

-----------------------------------------------------------------------------------

Step 1: Create: "Environment" * (for Nicer Organization)

-----------------------------------------------------------------------------------


Create Empty: "Environment"

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

First since this is just a "holder" added for better organization, let us go
ahead & drag the "Directional Light" into "Environment".

* also if you wanted you could add a "dir" called Environment and opt to place
  your TerrainData inside that in its own Dir "TerrainData" and as such any
  other Environment stuff respectively in as desired the "Environment" dir.
  Just a suggestion.

Also: We don't need the "Main Camera" in Sample Scene, so..., we can go ahead
and delete it.


-----------------------------------------------------------------------------------

Step 2: Create: "Terrain Plane"

-----------------------------------------------------------------------------------


Create New 3D Object: "Plane"

Position: X: 0   Y: -0.03 Z: 0 
Rotation: X: 0   Y: 0     Z: 0 
Scale:    X: 100 Y: 1     Z: 100

Rename to: "Terrain Plane"

We can now opt to clean up for better organization, simply drag the:
"Terrain Plane" into the holder "Environment" we added for just this exact
 purpose!


-----------------------------------------------------------------------------------

Step 3: Create: "Terrain"

-----------------------------------------------------------------------------------


Create New 3D Object: "Terrain"

Modify via:

"Terrain" Inspector: Terrain Settings

Position: X: -500 Y: 0 Z: -500 
Rotation: X: 0     Y: 0 Z: 0 
Scale:    X: 1     Y: 1 Z: 1

We can now opt to clean up for better organization, simply drag the:
"Terrain" into the holder "Environment" we added for just this exact purpose!


-----------------------------------------------------------------------------------

Step 4: Create: empty "Vehicle"

-----------------------------------------------------------------------------------


Create Empty: "Vehicle"

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Notes: Current Summary

-----------------------------------------------------------------------------------


Note: Ok, by now your scene heirarchy at top should look like this:

Environment
Vehicle

Nice and organized right?! :) Good Stuff! ;)

Note: as this uses a vehicle from such and due to licensing such vehicles
cannot be included in this repository obviously, as such the provided scripts
and instructions thus require having / purchasing the:

Synty Polygon Battle Royale Asset:
https://assetstore.unity.com/packages/3d/environments/urban/polygon-battle-royale-low-poly-3d-art-by-synty-128513


-----------------------------------------------------------------------------------

Step 5: Install: "Synty Polygon Battle Royal Asset"

-----------------------------------------------------------------------------------


Depending on how you purchased you can either use the package manager to
install the asset or if you are like me and say already have local repository
storage of purchased assets and have the package already you can install the
asset manually.

Asset package to install:

 POLYGON Battle Royale - Low Poly 3D Art by Synty.unitypackage

Purchase Synty Polygon Battle Royale Asset:
https://assetstore.unity.com/packages/3d/environments/urban/polygon-battle-royale-low-poly-3d-art-by-synty-128513


-----------------------------------------------------------------------------------

Step 6: Identify: the "Vehicle Prefab"

-----------------------------------------------------------------------------------


Let us first identify and locate the "Vehicle Prefab" we are going to use.

Assets > PolygonBattleRoyale > Prefabs > Vehicles

SM_Veh_Light_Armored_Car_01


-----------------------------------------------------------------------------------

Step 7: Add: the "Vehicle Prefab" to Scene

-----------------------------------------------------------------------------------


Drag the mentioned "Vehicle Prefab" into the scene & unpack the prefab completely

Next, rename the vehicle prefabs:

SM_Veh_Light_Armored_Car_01 => "Humvee02"

Next, set the Transform:

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

Material: PolygonBattleRoyale_Veh_02

Then move "Humvee02" into the empty: "Vehicle" as child of.


-----------------------------------------------------------------------------------

Step 8: Add: empty "View" as child

-----------------------------------------------------------------------------------


In "Humvee02" add empty as child named "View"

Set the Transform of "View":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Step 9: Add: "Camera" in empty "View" as child

-----------------------------------------------------------------------------------


In the empty: "View" add "Camera" component named: "Humvee02Camera"

Tag: Untagged

Depth: 0

Set the Transform of "Humvee02Camera":

Position: X: 0 Y: 1.4 Z: -6.4 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Step 10: Add: empty "WheelMeshes" as child

-----------------------------------------------------------------------------------


In "Humvee02" add empty as child named "WheelMeshes"

Set the Transform of "WheelMeshes":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

Copy & paste the following meshes into "WheelMeshes" as children
(delete originals after as they are not needed since we copied them into new
location)

SM_Veh_Light_Armored_Car_Wheel_fl
SM_Veh_Light_Armored_Car_Wheel_fr
SM_Veh_Light_Armored_Car_Wheel_rl
SM_Veh_Light_Armored_Car_Wheel_rr


Transforms should be fine and unaffected but, let us just mention them for
good measure and sdo note this particular model has some issues because the
designer actually has the back wheels incorrect as they are opposite
regardless of how they are named and not what they should be and unless you
notrice that you might run inot issues so let us correct that now:


SM_Veh_Light_Armored_Car_Wheel_fl
---------------------------------

Position: X: -0.8390951 Y: 0.4136755 Z: 1.70215
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_fr
---------------------------------

Position: X: 0.8390951 Y: 0.4136755 Z: 1.70215
Rotation: X: 0 Y: -180 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_rl
---------------------------------

Position: X: -0.9434342 Y: 0.4136755 Z: -1.524809
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_rr
---------------------------------

Position: X: 0.9434342 Y: 0.4136755 Z: -1.524809
Rotation: X: 0 Y: -180 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


Also you will note, that some of the wheel meshes have a -180 on the rotation,
that is fine, the provided script for this particular model has edits to
factor for those rotations so as to not conflict with Wheel Colliders
functionality.


-----------------------------------------------------------------------------------

Step 11: Duplicate: empty "WheelMeshes" as "WheelColliders"

-----------------------------------------------------------------------------------


In "Humvee02" duplicate "WheelMeshes" & rename to "WheelColliders"

Set the Transform of "VWheelColliders":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


Since you duplicated "WheelMeshes" & renamed to "WheelColliders" there should
be the children already present with matching infos...


SM_Veh_Light_Armored_Car_Wheel_fl
SM_Veh_Light_Armored_Car_Wheel_fr
SM_Veh_Light_Armored_Car_Wheel_rl
SM_Veh_Light_Armored_Car_Wheel_rr

Prior to the deletion of contents in WheelColliders if you desired to
determine the wheel radius so as to eventually use with Wheel Colliders well,
you could attach a Sphere Collider and gain Radius from that and then delete
the sphere collider after as such would no longer be necessary but instead to
avoid needing to do such I will provide that info so you do not necessarily
need to do so.

These details are important:


Front Wheels:
-------------

Front Wheels Collider Radius: 0.4145404
Front Wheels Collider Position Y: 0.5645404 (0.4145404+0.15) *

* Wheel colliders need +0.15 on the Y to function as intended as per
  documentation

Rear Wheels:
------------

Rear Wheels Collider Radius: 0.4145404
Rear Wheels Collider Position Y: 0.5645404 (0.4145404+0.15) *

* Wheel colliders need +0.15 on the Y to function as intended as per
  documentation

In "WheelColliders" children: * (since all are already present in WheelMeshes
and not needed for Wheel Colliders)

* Delete Mesh Filter
* Delete Mesh Renderer

Add Component "Wheel Collider" to each:

SM_Veh_Light_Armored_Car_Wheel_fl
SM_Veh_Light_Armored_Car_Wheel_fr
SM_Veh_Light_Armored_Car_Wheel_rl
SM_Veh_Light_Armored_Car_Wheel_rr

Set both front "Wheel Colliders" radius: 0.4145404
Set both rear  "Wheel Colliders" radius: 0.4145404

We will need to now edit these infos:


SM_Veh_Light_Armored_Car_Wheel_fl
---------------------------------

Position: X: -0.8390951 Y: 0.5645404 Z: 1.70215
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_fr
---------------------------------

Position: X: 0.8390951 Y: 0.5645404 Z: 1.70215
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_rl
---------------------------------

Position: X: -0.9434342 Y: 0.5645404 Z: -1.524809
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Light_Armored_Car_Wheel_rr
---------------------------------

Position: X: 0.9434342 Y: 0.5645404 Z: -1.524809
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Notes: Current Summary

-----------------------------------------------------------------------------------


Note: Ok, by now your vehicle heirarchy should look like this:

Mostly Collapsed:

Vehicle
  Humvee02
    SM_Veh_Light_Armored_Car_Glass_01
    SM_Veh_Light_Armored_Car_SteeringW_01  
    WheelMeshes
    WheelColliders   
    View

Fully Expanded:

Vehicle
  Humvee02
    SM_Veh_Light_Armored_Car_Glass_01
    SM_Veh_Light_Armored_Car_SteeringW_01
    WheelMeshes
      SM_Veh_Light_Armored_Car_Wheel_fl
      SM_Veh_Light_Armored_Car_Wheel_fr
      SM_Veh_Light_Armored_Car_Wheel_rl
      SM_Veh_Light_Armored_Car_Wheel_rr
    WheelColliders
      SM_Veh_Light_Armored_Car_Wheel_fl
      SM_Veh_Light_Armored_Car_Wheel_fr
      SM_Veh_Light_Armored_Car_Wheel_rl
      SM_Veh_Light_Armored_Car_Wheel_rr    
    View
      Humvee02Camera


-----------------------------------------------------------------------------------

Step 12: Add to: Humvee02 (Humvee02Controller.cs)

-----------------------------------------------------------------------------------


Attach component / script (Humvee02Controller.cs) to "Humvee02"

Adjust the following settings:

Require Components:
-------------------

Rigidbody: Humvee02 (Rigidbody)

Wheel Transforms:
-----------------

Front Left: SM_Veh_Light_Armored_Car_Wheel_fl (Transform)
Front Right: SM_Veh_Light_Armored_Car_Wheel_fr (Transform)
Rear Left: SM_Veh_Light_Armored_Car_Wheel_rl (Transform)
Rear Right: SM_Veh_Light_Armored_Car_Wheel_rr (Transform) 

WheelColliders:
---------------

Front Left: SM_Veh_Light_Armored_Car_Wheel_fl (Wheel Collider)
Front Right: SM_Veh_Light_Armored_Car_Wheel_fr (Wheel Collider)
Rear Left: SM_Veh_Light_Armored_Car_Wheel_rl (Wheel Collider)
Rear Right: SM_Veh_Light_Armored_Car_Wheel_rr (Wheel Collider) 

In Rigidbody:
-------------

Set Rigibody Mass: 2500


-----------------------------------------------------------------------------------

Step 13: Add to: Humvee02Camera (Humvee02Camera.cs)

-----------------------------------------------------------------------------------


Attach component / script (Humvee02Camera.cs) to "Humvee02Camera"

Adjust Settings:

Transforms:
-----------

Humvee02: Humvee02 (Transform)


-----------------------------------------------------------------------------------


That should about sum it up and should be about it and concludes the basic
Vehicle Controller manual setup steps. You can now begin to modify such
further for your specific needs.

Best of Luck!